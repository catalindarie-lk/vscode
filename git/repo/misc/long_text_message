                // Update client activity time
                EnterCriticalSection(&list.mutex);
                client->last_activity_time = time(NULL);
                LeaveCriticalSection(&list.mutex);

                // Push sequence number to queue to send ACK
                seq_num_entry.seq_num = header_seq_num;
                seq_num_entry.type = FRAME_TYPE_ACK;
                seq_num_entry.session_id = header_session_id;
                memcpy(&seq_num_entry.addr, src_addr, sizeof(struct sockaddr_in));
                if(push_seq_num(&queue_seq_num, &seq_num_entry) == -1){
                    fprintf(stderr, "Pushing seq_num error!!!\n");
                };

                // Extract the long text fragment and recombine the long message
                uint32_t payload_message_id = ntohl(frame->payload.long_text_msg.message_id);
                uint32_t payload_total_text_len = ntohl(frame->payload.long_text_msg.total_text_len);
                uint32_t payload_fragment_text_len = ntohl(frame->payload.long_text_msg.fragment_len);
                uint32_t payload_fragment_text_offset = ntohl(frame->payload.long_text_msg.fragment_offset);

                BOOL message_id_found = 0;
                uint32_t slot = 0;
                uint32_t free_slot = 0;

                for(slot = 0; slot < MAX_CONCURRENT_LONG_MESSAGES_PER_CLIENT; slot++){
                    if(client->long_msg_buff[slot].message_id == 0) {
                        free_slot = slot;
                        //break;
                    }
                    if(client->long_msg_buff[slot].message_id == payload_message_id){
                        message_id_found = TRUE;
                        //check if the received sequence number is a duplicate (if it exists in the hash then it was allready received)

                        //copy the received fragment text to the buffer
                        char *dest = client->long_msg_buff[slot].text + payload_fragment_text_offset;
                        char *src = frame->payload.long_text_msg.fragment_text;                                              
                        memcpy(dest, src, payload_fragment_text_len);
                        //update received bytes counter
                        client->long_msg_buff[slot].bytes_received += payload_fragment_text_len;
 //                       fprintf(stdout, "received seq num: %d\n", header_seq_num);

                        // FILE *new_file = fopen("E:\\out.txt", "ab");
                        // fseek(new_file, payload_fragment_text_offset, SEEK_SET);
                        // fwrite(frame->payload.long_text_msg.fragment_text, 1, payload_fragment_text_len, new_file);
                        // fclose(new_file);

                        mark_fragment_received(bitmap, payload_fragment_text_offset, _fragment_size);

                        //check if received full message (bytes received is equal to total payload)
                        if(client->long_msg_buff[slot].bytes_received == payload_total_text_len){                                                      
                            client->long_msg_buff[slot].text[payload_total_text_len] = '\0';                           
                            FILE *new_file = fopen("E:\\out.txt", "wb");
                            //fprintf(new_file, "%s", client->long_msg_buff[slot].text);
                            fwrite(client->long_msg_buff[slot].text, 1, payload_total_text_len, new_file);
                            fclose(new_file);
                            // fprintf(stdout, "Received long text msg from %s:%d - Bytes: %d - ID: %d\n", src_ip, src_port, payload_total_text_len, payload_message_id);
                            // fprintf(stdout, "Message: %s\n", client->long_msg_buff[slot].text);                   
                            free(client->long_msg_buff[slot].text);
                            client->long_msg_buff[slot].message_id = 0;
                            client->long_msg_buff[slot].bytes_received = 0;
                            free(bitmap);
                            _fragment_size = 0;
                        }
                        break;                     
                    }
                }
                if(message_id_found) 
                    break;
                //check if the received sequence number is a duplicate (if it exists in the hash then it was allready received)
                
                nr_of_fragments = payload_total_text_len / payload_fragment_text_len;
                if((payload_total_text_len % payload_fragment_text_len) > 0){
                    ++nr_of_fragments;
                }
                nr_bitmap_entries = nr_of_fragments / 32 + 1;  //using 32 bits unsigned int values and each bit will store the recived state of a fragment
                
                fprintf(stdout, "Total size bytes: %d\n", payload_total_text_len);
                fprintf(stdout, "Fragment size bytes: %d\n", payload_fragment_text_len);
                fprintf(stdout, "Nr of Fragments: %d\n", nr_of_fragments);                
                fprintf(stdout, "Nr of Bitmap 32bit entries: %d\n", nr_bitmap_entries);

                bitmap = malloc(nr_bitmap_entries * sizeof(uint32_t));
                memset(bitmap, 0, nr_bitmap_entries * sizeof(uint32_t));
                _fragment_size = payload_fragment_text_len;
                
                //copy the received fragment text to the buffer            
                client->long_msg_buff[free_slot].message_id = payload_message_id;
                client->long_msg_buff[free_slot].text = malloc(payload_total_text_len);
                if(client->long_msg_buff[free_slot].text == NULL){
                    fprintf(stdout, "Error allocating memory!!!\n");
                    break;
                }
                char *dest = client->long_msg_buff[free_slot].text + payload_fragment_text_offset;
                char *src = frame->payload.long_text_msg.fragment_text;
                memcpy(dest, src, payload_fragment_text_len);
                //update received bytes counter
                client->long_msg_buff[free_slot].bytes_received = payload_fragment_text_len;
                //add the received seqence number to hash

                // FILE *new_file = fopen("E:\\out.txt", "wb");
                // fseek(new_file, payload_fragment_text_offset, SEEK_SET);
                // fwrite(frame->payload.long_text_msg.fragment_text, 1, payload_fragment_text_len, new_file);
                // fclose(new_file);


                mark_fragment_received(bitmap, payload_fragment_text_offset, _fragment_size);              

                //check if received full message (bytes received is equal to total payload)
                if(client->long_msg_buff[free_slot].bytes_received == payload_total_text_len){
                    client->long_msg_buff[free_slot].text[payload_total_text_len] = '\0';
                    FILE *new_file = fopen("E:\\out.txt", "wb");
                    fwrite(client->long_msg_buff[free_slot].text, 1, payload_total_text_len, new_file);
                    //fprintf(new_file, "%s", client->long_msg_buff[free_slot].text);                   
                    fclose(new_file);
                    // fprintf(stdout, "Received long text msg from %s:%d - Bytes: %d - ID:%d\n", src_ip, src_port, payload_total_text_len, payload_message_id);                   
                    // fprintf(stdout, "Message: %s\n", client->long_msg_buff[free_slot].text);                   
                    free(client->long_msg_buff[free_slot].text);
                    client->long_msg_buff[free_slot].message_id = 0;
                    client->long_msg_buff[free_slot].bytes_received = 0;
                    free(bitmap);
                    _fragment_size = 0;
                }
